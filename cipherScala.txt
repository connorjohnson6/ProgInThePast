object CeaserCipher {
  def main(args: Array[String]) {
    var str = "HAL"
    var shiftAmount = 3

    val encryptedStr = encrypt(str, shiftAmount)
    println("Encrypted: " + encryptedStr)

    val decryptedStr = decrypt(encryptedStr, shiftAmount)
    println("Decrypted: " + decryptedStr)

    println("Solve:")
    solve(str) // Pass the encrypted string to the solve function
  }

  def encrypt(str: String, shiftAmount: Int): String = {
    // Using toCharArray method to convert the string to an array of characters
    str.toCharArray.collect {
      // Using a case statement to match on each character in the array
      case character if character.isUpper => (((character - 65 + shiftAmount) % 26 + 26) % 26 + 65).toChar // Encrypt uppercase character
      case character => character // Return unchanged for any other character
    }.mkString // Convert the array of characters back to a string
  }

  def decrypt(str: String, shiftAmount: Int): String = {
    // Using toCharArray method to convert the string to an array of characters
    str.toCharArray.collect {
      // Using a case statement to match on each character in the array
      case character if character.isUpper => (((character - 65 - shiftAmount) % 26 + 26) % 26 + 65).toChar // subtract the shiftamout for decrypt
      case character => character// Return unchanged for any other character
    }.mkString // Convert the array of characters back to a string
  }

  def solve(str:String) : Unit = {
    var maxShiftAmount = 26 // could not set maxShiftAmount in main if I wanted to increment

    //if maxShiftAmount is postive
    if (maxShiftAmount >=0){
      positiveShiftValueRecursion(maxShiftAmount)
    }

    //if maxShiftAmount is negative
    if (maxShiftAmount <0){
      negativeShiftValueRecursion(maxShiftAmount)
    }

    def positiveShiftValueRecursion(maxShiftAmount: Int): Unit = {
      if( maxShiftAmount >= 0){
        var solveEncrypt = encrypt(str, maxShiftAmount) //calls from the encrypt function to continuously get results
        println("Ceaser " + maxShiftAmount +  ": " +  solveEncrypt)
        positiveShiftValueRecursion(maxShiftAmount - 1) //keep maxShiftAmount at positive number and decrease to 0 to print properly
      }
    }

    def negativeShiftValueRecursion(maxShiftAmount: Int): Unit = {
      if(maxShiftAmount <= 0){
        val solveDecrypt = decrypt(str, -maxShiftAmount) // Pass the absolute value of maxShiftAmount to decrypt
        println("Caesar " + maxShiftAmount + ": " + solveDecrypt)
        negativeShiftValueRecursion(maxShiftAmount + 1)
      }
    }
  }
}
