object CeaserCipher {
    def main(args: Array[String]) {
        var str = "HAL"
        var shiftAmount = 3
        var maxShiftValue = 26
        
        println("Encrypted: " +  encrypt(str, shiftAmount))
        println("Decrypted: " + decrypt(str, shiftAmount))
        println("Solve:")
        solve(str)

        
    }//ends main
    
            //define variabels for function     
    def encrypt( str:String, shiftAmount:Int ) : String = {
        var encrypted = ""

        for (position <- str){        //no ord() function = use .toInt      //iterate through the innitial message
            if (position.toInt >= 65 && position.toInt <= 90) { // ASCII *Uppercase* letter in alphabet
                encrypted += (((position.toInt - 65 + shiftAmount) % 26 + 26) % 26 + 65).toChar  //test for positive and negative numbers
            } else {                                                                   //.toChar takes the ASCII number and converts to number 
                                                                      //^+26 allows for loop in alphabet
                encrypted += position  //adds if not a character in alphabet 
            }
        }
        encrypted
    }
    
    def decrypt(str:String, shiftAmount:Int) : String = {
        var encryptedstring = encrypt(str, shiftAmount)
        var decrypted = "" 

        for (position <- encryptedstring){
            if (position.toInt >= 65 && position.toInt <= 90) { 
                decrypted += (((position.toInt - 65 - shiftAmount) % 26 + 26) % 26 + 65).toChar
            } else {                        //minus reverses the shift and creates decrypt
                decrypted += position 
            }
        }
        decrypted
    }
    
    def solve(str:String) : Unit = {
        var maxShiftValue = -26 // could not set maxShiftValue in main if I wanted to increment
        
        //if maxShiftValue is postive
        if (maxShiftValue >=0){
            while (maxShiftValue >= 0){
                var solveEncrypt = encrypt(str, maxShiftValue)
                println("Ceaser " + maxShiftValue +  ": " +  solveEncrypt)
                maxShiftValue -= 1 //keep maxShiftValue at positive number and incremenet to 0 to print properly 
            }
        }else{//if maxShiftValue is negative
            while (maxShiftValue <= 0){
                var solveDecrypt = decrypt(encrypt(str, maxShiftValue).toString, maxShiftValue)//figure out why only decrypting it doesnt work //because i was passing a regular str rather than the function encrypt (str, maxshiftvalue)
                println("Ceaser " + maxShiftValue +  ": " +  solveDecrypt) 
                maxShiftValue += 1 //keep maxShiftValue at negative number and incremenet to 0 to print properly
            }
        }
    }
}//ends CeaserCipher 